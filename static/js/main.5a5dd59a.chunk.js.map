{"version":3,"sources":["media/hot-air-balloon.png","components/Header.js","components/Scoreboard.js","utils/generateChoices.js","utils/endRoundBtns.js","components/Card.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","_ref","numCards","numCorrect","numIncorrect","role","generateChoices","choices","showNextQuestion","checkAnswer","handleClick","e","answer","target","innerHTML","map","choice","index","aria-label","key","onClick","endRoundBtns","resetAllQuestions","resetIncorrectQuestions","Card","currentQuestion","buttons","display","question","aria-live","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidUpdate","setStateLocalStorage","componentDidMount","localStorage","length","setState","getStateLocalStorage","fetch","then","response","json","data","currentQuestions","assign","cards","splice","catch","error","Error","state","correctQuestions","concat","incorrectQuestions","shift","allQuestions","setItem","JSON","stringify","parse","getItem","addBalloons","correctQues","aria-hidden","src","balloon","style","top","getRandomWindowHeight","alt","height","window","innerHeight","Math","floor","random","balloons","card","components_Card","scoreboard","Scoreboard","components_Header","Component","Boolean","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5a5dd59a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hot-air-balloon.30e7b438.png\";","import React from 'react';\nimport '../styles/_Header.scss';\n\nconst Header = () => {\n  return (\n    <header className=\"App-header\">\n      <h1>ARIA Flashcards</h1>\n    </header>\n  )\n}\n\nexport default Header;","import React from 'react';\nimport '../styles/_Scoreboard.scss';\n\nconst Header = ({numCards,numCorrect,numIncorrect}) => {\n  return (\n    <section className=\"Scoreboard\">\n      <h2>Cards Left: {numCards}</h2>\n      <h2 role=\"alert\">Correct: {numCorrect}</h2>\n      <h2 role=\"alert\">Incorrect: {numIncorrect}</h2>\n    </section>\n  )\n}\n\nexport default Header;","import React from 'react';\n\nfunction generateChoices(choices, showNextQuestion, checkAnswer) {\n  const handleClick = (e) => {\n    let answer = e.target.innerHTML;\n    checkAnswer(answer);\n    showNextQuestion();\n  }\n  return (\n    <div className=\"btnContainer\">\n      {\n        choices.map((choice, index) => {\n          return <button aria-label={\"Answer option: \" + choice} className={'choice-btn-' + (index + 1)} key={index} onClick={handleClick}>{choice}</button>\n        })\n      }\n    </div>\n  )\n}\n\nexport default generateChoices;","import React from 'react';\n\nfunction endRoundBtns(resetAllQuestions, resetIncorrectQuestions) {\n  return (\n    <div className=\"btnContainer\">\n      <button aria-label=\"Reset all cards\" className=\"resetAll\" onClick={resetAllQuestions}>Reset All Questions</button>\n      <button aria-label=\"Practice only incorrect cards\" className=\"resetIncorrect\" onClick={resetIncorrectQuestions}>Practice Incorrect Questions</button>\n    </div>\n  )\n}\n\nexport default endRoundBtns;","import React from 'react';\nimport '../styles/_Card.scss';\nimport generateChoices from '../utils/generateChoices';\nimport endRoundBtns from '../utils/endRoundBtns';\n\nconst Card = ({\n  currentQuestion,\n  showNextQuestion,\n  resetAllQuestions,\n  resetIncorrectQuestions,\n  checkAnswer\n  }) => {\n  const choices = currentQuestion && currentQuestion.choices;\n  const buttons = currentQuestion ? generateChoices(choices, showNextQuestion, checkAnswer) : endRoundBtns(resetAllQuestions, resetIncorrectQuestions);\n  const display = currentQuestion ? <h4>{currentQuestion.question}</h4> : <h4 aria-live=\"assertive\">All Done! Do you want to go again?</h4>\n  return (\n    <section className=\"Card\">\n      {display}\n      {buttons}\n    </section>\n  )\n}\n\nexport default Card;","import React, { Component } from 'react';\nimport '../styles/_App.scss';\nimport Header from './Header';\nimport Scoreboard from './Scoreboard';\nimport Card from './Card';\nimport balloon from '../media/hot-air-balloon.png';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      currentQuestions: null,\n      currentQuestion: {},\n      correctQuestions: [],\n      incorrectQuestions: []\n    }\n  }\n\n  componentDidUpdate = () => {\n    this.setStateLocalStorage();\n  }\n\n  componentDidMount = () => {\n    if(localStorage.length) {\n      this.setState(this.getStateLocalStorage());\n    } else {\n      fetch('https://fe-apps.herokuapp.com/api/v1/memoize/1901/ryandbarnett/cards')\n      .then(response => response.json())\n      .then(data => {\n        this.setState({\n          currentQuestions: Object.assign([], data.cards).splice(1),\n          currentQuestion: Object.assign({}, data.cards[0])\n        })\n      })\n      .catch(error => {throw new Error(error)})\n    }\n  }\n\n  checkAnswer = (answer) => {\n    if(this.state.currentQuestion.answer === answer) {\n      this.setState({\n        correctQuestions: this.state.correctQuestions.concat([this.state.currentQuestion])\n      })\n    } else {\n      this.setState({\n        incorrectQuestions: this.state.incorrectQuestions.concat([this.state.currentQuestion])\n      })\n    }\n  }\n  \n  showNextQuestion = () => {\n    this.setState({\n      currentQuestion: this.state.currentQuestions.shift()\n    });\n  }\n\n  resetAllQuestions = () => {\n    const allQuestions = this.state.correctQuestions.concat(this.state.incorrectQuestions)\n    this.setState({\n      currentQuestions: allQuestions.splice(1),\n      currentQuestion: allQuestions[0],\n      correctQuestions: [],\n      incorrectQuestions: []\n    })\n  }\n\n  resetIncorrectQuestions = () => {\n    this.setState({\n      currentQuestions: this.state.incorrectQuestions.splice(1),\n      currentQuestion: this.state.incorrectQuestions[0],\n      incorrectQuestions: []\n    })\n  }\n\n  setStateLocalStorage = () => {\n    localStorage.setItem('appState', JSON.stringify(this.state));\n  }\n\n  getStateLocalStorage = () => {\n    return JSON.parse(localStorage.getItem('appState'));\n  }\n\n  addBalloons = () => {\n    return (\n      this.state.correctQuestions.map((correctQues, index) => {\n        return <img className=\"hot-air-balloon\" aria-hidden=\"true\" key={index} src={balloon} style={{top: this.getRandomWindowHeight()}} alt=\"Orange and red striped hot air balloon\"/>\n      })\n    )\n  }\n\n  getRandomWindowHeight = () => {\n    let height = window.innerHeight;\n    return Math.floor(Math.random() * height) + 1;\n  }\n\n  render() {\n    let balloons = this.state.correctQuestions && this.addBalloons();\n    let card = this.state.currentQuestions !== null &&\n      <Card\n        currentQuestion={this.state.currentQuestion}\n        showNextQuestion={this.showNextQuestion}\n        resetAllQuestions={this.resetAllQuestions}\n        resetIncorrectQuestions={this.resetIncorrectQuestions}\n        checkAnswer={this.checkAnswer}\n      />;\n    let scoreboard = this.state.currentQuestions !== null &&\n      <Scoreboard \n        numCards={this.state.currentQuestions.length}\n        numCorrect={this.state.correctQuestions.length}\n        numIncorrect={this.state.incorrectQuestions.length}\n      />\n\n    return (\n      <main className=\"App\">\n        {balloons}\n        <Header />\n        {scoreboard}\n        {card}\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}